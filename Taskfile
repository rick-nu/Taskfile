#!/bin/bash
# =========================================================
# Taskfile gives you a set of quick tasks for your project
# More info: https://github.com/Enrise/Taskfile
# =========================================================

function banner {
	echo -e "${BLUE}\n"\
	"████████╗ █████╗ ███████╗██╗  ██╗███████╗██╗██╗     ███████╗\n"\
	"╚══██╔══╝██╔══██╗██╔════╝██║ ██╔╝██╔════╝██║██║     ██╔════╝\n"\
	"   ██║   ███████║███████╗█████╔╝ █████╗  ██║██║     █████╗  \n"\
	"   ██║   ██╔══██║╚════██║██╔═██╗ ██╔══╝  ██║██║     ██╔══╝  \n"\
	"   ██║   ██║  ██║███████║██║  ██╗██║     ██║███████╗███████╗\n"\
	"   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝${RESET}"
}

# =========================================================
## Project
# =========================================================

function task:init { ## Set up the project for local development
	task:update
	task:help
}

function task:update { ## Update all project dependencies
	project:install-dependencies
}

function task:pr { ## Check out pull request <number> and update
	project:checkout-pr $1
	task:update
}

function project:checkout-pr {
	title "Checking out pull request"
	if [ -z "$1" ]
	then
		echo "You need to provide a pull request number to check out."
		echo -e "${BLUE}Usage:${RESET} $0 pr ${YELLOW}<number>${RESET}"
		exit 422
	fi
	echo "Checking out pull request $1..."
	git fetch origin refs/pull/$1/head:refs/remotes/origin/pr/$1
	git checkout origin/pr/$1
}

function project:install-dependencies {
	title "Installing dependencies"
	npm install
}

function task:prettify { ## Prettify all files
	title "Cleaning codestyle"
	echo "Prettifying files..."
	prettier --write --list-different .
	echo "Done."
}

# =========================================================
## Development
# =========================================================

function task:start { ## Start development mode
	title "Run project in development mode"
	npm run dev
}

function task:production { ## Build and run production output
	title "Build production application"
	npm run build
	title "Run production container"
	echo -e "Production:    ${BLUE}http://localhost:3089${RESET}\n"
	docker run --rm --publish 3089:80 --name tasksite --volume ./out:/var/www nstapelbroek/static-webserver:5
}

# Todo: Token als je meerdere Jira-omgevingen hebt
function task:jira:init {
    title "Setting up Jira integration"
    mkdir -p ~/.config/.jira
    if [ ! -f ~/.config/.jira/token ]; then
        echo "In order to interact with Jira from the terminal you need to create an API token."
        gum confirm "Open your browser to generate a Jira token?" && open https://id.atlassian.com/manage-profile/security/api-tokens
        token=$(gum input --placeholder="Paste Jira token here" --password)
        echo "JIRA_API_TOKEN='$token'" >  ~/.config/.jira/token
        task:restart

    fi
    if [ ! -f ~/.config/.jira/mcmain.yml ]; then
        docker:exec api "jira init --installation cloud --server https://enrise.atlassian.net --project MCMAIN --board 'MCMAIN board' --config ~/.config/.jira/mcmain.yml"
    else
        echo Jira set up correctly
    fi
}

function task:jira { ## Run jira commands
    docker:exec api "jira --config ~/.config/.jira/mcmain.yml $*"
}

function task:jira:status { ## Move the ticket to a status
    ## Branch & open new MR
    issue=$(git branch --show-current)
    docker:exec api "jira --config ~/.config/.jira/mcmain.yml issue move $issue"
    docker:exec api "jira --config ~/.config/.jira/mcmain.yml issue assign $issue"
}

function task:jira:web { ## Open the ticket in your browser
    ticket=$(git branch --show-current)
    open https://enrise.atlassian.net/browse/$ticket
}


# =========================================================
## Automation
# =========================================================

function task:pre-commit { ## Clean up code before committing
	task:prettify
	title "Comitting"
}

# =========================================================
## Taskfile
# =========================================================

set -eo pipefail

BLUE=$(printf '\033[36m')
YELLOW=$(printf '\033[33m')
RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
RESET=$(printf '\033[0m')

PATH=./node_modules/.bin:$PATH

function title {
	echo -e "\n${BLUE}=>${RESET} $1\n"
}

function task:help { ## Show all available tasks
	title "Available tasks"
	awk 'BEGIN {FS = " { [#][#][ ]?"} /^([a-zA-Z_-]*:?.*)(\{ )?[#][#][ ]?/ \
		{printf "\033[33m%-34s\033[0m %s\n", $1, $2}' $0 |\
		sed -E "s/[#]{2,}[ ]*/${RESET}/g" |\
		sed -E "s/function task:*/  /g"
	echo -e "\n${BLUE}Usage:${RESET} $0 ${YELLOW}<task>${RESET} <args>"
}

function task:shorthand { ## Create CLI shorthand task instead of ./Taskfile
	title "Creating task shorthand"
	if [ -f /usr/local/bin/task ]
	then
		echo "/usr/local/bin/task already exists."
	else
		echo -e "You are about to create /usr/local/bin/task that requires root permission..."
		sudo curl --location --silent --output /usr/local/bin/task https://enri.se/taskfile-bin
		sudo chmod +x /usr/local/bin/task
	fi
	echo -e "${BLUE}You can now use:${RESET} task ${YELLOW}<task>${RESET} <args>"
}

# Execute tasks
banner
if [[ "$(declare -fF task:${@-help})" ]]; then task:${@-help}; else task:help; exit 1; fi
